{
    "collab_server" : "",
    "contents" : "########################### run TSDT  ####################\noutput$TSDTTabs <- renderUI({\n  req(values$sid.data$data)\n  req(values$sid.data$outcomes)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  TSDTTabs <- \n    lapply(X = outcomes, FUN = function(y){\n      tabPanel(title = y,\n               hidden(\n                 actionButton(inputId = paste(\"TSDT_save\", y, sep = \"_\"),\n                              label = \"Save rules\")\n               ),\n               dataTableOutput(outputId = paste(\"TSDT\", y, sep = \"_\")))\n    })\n  do.call(tabsetPanel, TSDTTabs)\n})\n\nobserve({\n  req(values$sid.data$data)\n  req(values$sid.data$outcomes)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  lapply(X = outcomes, FUN = function(y) {\n    output[[paste(\"TSDT\", y, sep = \"_\")]] <- renderDataTable({\n      req(values$TSDT[[y]])\n      return(values$TSDT[[y]])\n    })\n  })\n  lapply(X = outcomes, FUN = function(y) {\n    shinyjs::onclick(id = paste(\"TSDT_save\", y, sep = \"_\"),\n            expr = {\n                req(values$TSDT[[y]])\n              rules <-\n                parseTSDTResults(TSDT_table = values$TSDT[[y]], \n                                 outcome = y, \n                                 filter = input$TSDTfilter,\n                                 param = values$TSDTparam)\n                values$sid.data$rules <- rbind(values$sid.data$rules, rules)\n                shinyjs::hide(id = paste(\"TSDT_save\", y, sep = \"_\"))\n            })\n  })\n})\n\n\nonclick(id = \"runTSDT\", expr = {\n  req(values$sid.data$outcomes)\n  req(values$sid.data$data)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  \n  values$TSDT <- \n    lapply(X = outcomes, FUN = function(y){\n      runTSDT(\n        subgroup.data = values$sid.data, \n        y_idx = y,\n        maxdepth = input$TSDTmaxdepth, \n        min_subgroup_n_control = input$min_subgroup_n_control,\n        min_subgroup_n_trt = input$min_subgroup_n_trt,\n        desirable_response = input$desirable_response, \n        nsamples = input$nsamples,\n        npermutations = input$npermutations,\n        n_cpu = 1\n      )\n  })\n  names(values$TSDT) <- outcomes\n  \n  values$TSDTparam <- \n    list(\n        maxdepth = input$TSDTmaxdepth, \n        min_subgroup_n_control = input$min_subgroup_n_control,\n        min_subgroup_n_trt = input$min_subgroup_n_trt,\n        desirable_response = input$desirable_response, \n        nsamples = input$nsamples,\n        npermutations = input$npermutations\n      )\n  for (y in outcomes) {\n    shinyjs::show(id = paste(\"TSDT_save\", y, sep = \"_\"))\n  }\n})\n\n########################### run PSO  ####################\n\noutput$PSOTabs <- renderUI({\n  req(values$sid.data$data)\n  req(values$sid.data$outcomes)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  PSOTabs <- \n    lapply(X = outcomes, FUN = function(y){\n      tabPanel(title = y,\n               hidden(\n                 actionButton(inputId = paste(\"PSO_save\", y, sep = \"_\"),\n                              label = \"Save rules\")\n               ),\n               dataTableOutput(outputId = paste(\"PSO\", y, sep = \"_\")))\n    })\n  do.call(tabsetPanel, PSOTabs)\n})\n\nobserve({\n  req(values$sid.data$data)\n  req(values$sid.data$outcomes)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  lapply(X = outcomes, FUN = function(y) {\n    output[[paste(\"PSO\", y, sep = \"_\")]] <- renderDataTable({\n      req(values$PSO[[y]])\n      return(values$PSO[[y]])\n    })\n  })\n  lapply(X = outcomes, FUN = function(y) {\n    shinyjs::onclick(id = paste(\"PSO_save\", y, sep = \"_\"),\n            expr = {\n              req(values$PSO[[y]])\n              values$sid.data$rules <- rbind(values$sid.data$rules, values$PSO[[y]])\n              shinyjs::hide(id = paste(\"PSO_save\", y, sep = \"_\"))\n            })\n  })\n})\n\nonclick(\n  id = \"runPSO\",\n  expr = {\n    req(values$sid.data$outcomes)\n    req(values$sid.data$data)\n    if(is.na(input$abstol)) {\n      abstol = -Inf\n    }\n    \n    outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n    \n    values$PSO <- lapply(X = outcomes, FUN = function(y) {\n      print(y)\n      runPSO(\n        subgroup.data = values$sid.data, \n        y_idx = y,\n        nmin = input$PSOnmin, \n        depth = input$PSOdepth, \n        desirable_response = input$direction, \n        swarm_size = input$swarm_size,\n        iterations = input$iterations, \n        abstol = abstol, \n        reltol = input$reltol,\n        maxit.stagnate = input$maxit.stagnate\n      )\n    })\n    names(values$PSO) <- outcomes  \n    \n    for (y in outcomes) {\n      shinyjs::show(id = paste(\"PSO_save\", y, sep = \"_\"))\n    }\n})\n\n########################### run Virtual Twins  ####################\n\n\noutput$VTTabs <- renderUI({\n  req(values$sid.data$data)\n  req(values$sid.data$outcomes)\n  req(values$sid.data$contrast)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  outcomeTypes <- values$sid.data$outcomeTypes\n  outcomes <- outcomes[outcomeTypes == \"binary\"]\n  VTTabs <- \n    lapply(X = outcomes, FUN = function(y){\n      tabPanel(title = y,\n               hidden(\n                 actionButton(inputId = paste(\"VT_save\", y, sep = \"_\"),\n                              label = \"Save rules\")\n               ),\n               dataTableOutput(outputId = paste(\"VT\", y, sep = \"_\")))\n    })\n  do.call(tabsetPanel, VTTabs)\n})\n\nobserve({\n  req(values$sid.data$data)\n  req(values$sid.data$outcomes)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  outcomeTypes <- values$sid.data$outcomeTypes\n  outcomes <- outcomes[outcomeTypes == \"binary\"]\n  \n  lapply(X = outcomes, FUN = function(y) {\n    output[[paste(\"VT\", y, sep = \"_\")]] <- renderDataTable({\n      req(values$VT[[y]])\n      return(values$VT[[y]])\n    })\n  })\n  lapply(X = outcomes, FUN = function(y) {\n    shinyjs::onclick(id = paste(\"VT_save\", y, sep = \"_\"),\n            expr = {\n              req(values$VT[[y]])\n              rules <-\n                parseVTResults(VT_table = values$VT[[y]], \n                               outcome = y, \n                               param = values$VTparam)\n              values$sid.data$rules <- rbind(values$sid.data$rules, rules)\n              shinyjs::hide(id = paste(\"VT_save\", y, sep = \"_\"))\n            })\n  })\n})\n\n\nonclick(id = \"runVirtualTwins\", expr = {\n  req(values$sid.data$outcomes)\n  req(values$sid.data$data)\n  outcomes <- colnames(values$sid.data$data)[values$sid.data$outcomes]\n  outcomeTypes <- values$sid.data$outcomeTypes\n  outcomes <- outcomes[outcomeTypes == \"binary\"]\n  \n  values$VT <- \n    lapply(X = outcomes, FUN = function(y){\n      runVirtualTwins(\n        subgroup.data = values$sid.data, \n        y_idx = y,\n        forest.type = input$forest.type, \n        tree.type = input$tree.type,\n        folds = input$folds, \n        sampsize = input$sampsize, \n        maxdepth = input$VTmaxdepth, \n        method = input$VTmethod, \n        interactions = input$interactions, \n        ntree = input$ntree)\n    })\n  names(values$VT) <- outcomes\n  \n  values$VTparam <- \n    list(\n      forest.type = input$forest.type, \n      tree.type = input$tree.type,\n      folds = input$folds, \n      sampsize = input$sampsize, \n      maxdepth = input$VTmaxdepth, \n      method = input$VTmethod, \n      interactions = input$interactions, \n      ntree = input$ntree\n    )\n  for (y in outcomes) {\n    shinyjs::show(id = paste(\"VT_save\", y, sep = \"_\"))\n  }\n})\n",
    "created" : 1565725318177.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4198706236",
    "id" : "43B61549",
    "lastKnownWriteTime" : 1565725337,
    "last_content_update" : 1565725337944,
    "path" : "~/sidtoolbox/inst/shiny-examples/sidApp/src/server_runSid.R",
    "project_path" : "inst/shiny-examples/sidApp/src/server_runSid.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}